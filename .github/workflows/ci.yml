name: CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      neo4j:
        image: neo4j:4.4
        ports:
          - 7687:7687
        options: >-
          --env=NEO4J_AUTH=neo4j/PWD_HERE
          --env=NEO4J_dbms_connector_bolt_advertised__address=localhost:7687
          --env=NEO4J_dbms_connector_http_advertised__address=localhost:7474
          --health-cmd "cypher-shell -u neo4j -p PWD_HERE 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install neo4j

    - name: Create Docker Network
      run: |
        docker network create ckn-network || true

    - name: Start Docker Compose
      run: |
        docker-compose up -d

    - name: Wait for Neo4j to be ready
      run: |
        echo "Waiting for Neo4j to be ready..."
        while ! docker exec neo4j cypher-shell -u neo4j -p PWD_HERE "RETURN 1" > /dev/null 2>&1; do \
          echo "neo4j-server starting..."; \
          sleep 5; \
        done
        echo "Neo4j is ready"

    - name: Apply Constraints
      run: |
        docker cp ckn_kg/constraints.cypher neo4j:/constraints.cypher
        docker exec neo4j cypher-shell -u neo4j -p PWD_HERE -f /constraints.cypher

    - name: Run Tests
      env:
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PWD: PWD_HERE
      run: |
        python -m unittest discover -s tests -p "*.py"

    - name: Stop and Remove Docker Network
      if: always()
      run: |
        docker-compose down
        docker network rm ckn-network || true
